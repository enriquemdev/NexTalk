---
description: This document defines the project rules and authorized tech stack for NextTalk, ensuring consistency, performance, and scalability in development.
globs: 
alwaysApply: true
---
# Project Rules for Development

## Authorized Tech Stack
The project must strictly adhere to the following technologies. Do not introduce additional frameworks, libraries, or tools outside of this list unless explicitly requested and approved:

- **Frontend:**
  - Next.js v15 (with App Router)
  - TypeScript
  - Tailwind CSS
  - Shadcn UI components
  - JavaScript (vanilla JS for custom scripts)

- **Backend:**
  - Next.js API routes (for server-side logic)
  - Convex (for real-time database, authentication, and object storage)
  - LiveKit (for real-time audio/video streaming and WebRTC management) INTEGRATE IT IF ITS MISSING

- **AI Integrations:**
  - Vercel SDK with OpenAI API (for general AI features like recommendations and summaries)
  - Eleven Labs API (for speech-to-text and text-to-speech functionalities)

- **Optional Tools (if needed):**
  - Upstash (for caching or queues)
  - Luma AI (for video generation in commercial features)
  - Fal AI (for image generation in commercial features)

- **Authentication:**
  - Clerk (for user authentication and management)

- **Testing:**
  - Jest (for unit and integration tests)
  - Cypress or Playwright (for end-to-end tests)

- **Deployment:**
  - Vercel (for hosting and serverless functions)

## Call Streaming Workflow
This section outlines the integration of LiveKit for real-time audio/video streaming:

1. **User Authentication:**
   - The user logs in using Clerk, which provides a `userId` for identification.

2. **Room Management:**
   - Your Next.js app uses the `userId` from Clerk to fetch and display available rooms stored in Convex.

3. **Access Token Generation:**
   - The app generates a LiveKit JWT access token using the `userId` as the identity, via a secure Next.js API route.

4. **Joining a Room:**
   - The frontend uses the generated LiveKit token to connect to a specific room in LiveKit.
   - LiveKit handles all WebRTC-related functionality (signaling and media transmission) for real-time audio/video streaming.

5. **Data Persistence with Convex:**
   - Convex remains the central database for:
     - Storing room details (e.g., room IDs, metadata).
     - Managing participants (e.g., who’s in the call).
     - Tracking call states (e.g., active, ended).
     - Maintaining call history and related data.

## Development Guidelines

1. **Prioritize Existing Tools:**
   - Always leverage the installed tech stack (Next.js, Convex, Shadcn, LiveKit) before suggesting or integrating external libraries.
   - Example: Use Convex’s real-time features for data syncing and LiveKit for streaming instead of adding new libraries.

2. **Next.js Constraints:**
   - Use the App Router exclusively for routing and navigation.
   - Implement server-side logic via Next.js API routes or Vercel serverless functions.
   - Avoid features requiring advanced server configurations not supported by Vercel.

3. **Frontend Development:**
   - Use Tailwind CSS for styling, ensuring compatibility with Shadcn UI components.
   - Leverage Next.js optimizations (e.g., image optimization, code splitting).
   - Use functional components with hooks; avoid class components.

4. **Backend and Database:**
   - Use Convex exclusively for database operations, real-time updates, and authentication (excluding streaming).
   - Define schemas and queries in the `/convex` directory.
   - Optimize real-time data handling for low latency.

5. **Streaming with LiveKit:**
   - Use LiveKit for all WebRTC-related tasks (signaling, peer-to-peer streaming).
   - Generate secure JWT tokens server-side using Next.js API routes.
   - Ensure seamless integration with Convex for room and participant management.

6. **AI Integration Best Practices:**
   - Optimize OpenAI and Eleven Labs API calls to reduce costs and latency.
   - Make AI features (e.g., translations, captions) optional and user-toggleable.
   - Handle audio streams efficiently for speech processing.

7. **Testing:**
   - Write unit tests for critical components and utilities using Jest.
   - Implement integration tests for real-time features, AI integrations, and LiveKit streaming.
   - Use Cypress or Playwright for end-to-end tests to verify user flows.

8. **Performance and Scalability:**
   - Implement lazy loading and code splitting to minimize initial load times.
   - Optimize Convex queries and LiveKit connections to prevent performance bottlenecks.
   - Monitor and enhance real-time updates and streaming for large sessions.

9. **Security:**
   - Use Convex for secure authentication and authorization of data.
   - Use Clerk for user authentication and LiveKit JWTs for secure streaming access.
   - Validate all user inputs and secure API routes.
   - Ensure payment integrations (in commercial features) follow security best practices.

10. **Code Maintenance:**
    - Do not erase or modify code providing existing functionality unless explicitly instructed.
    - Accumulate functionality in files like migrations or seeders without removing prior implementations.
    - Example: Add new permissions or schema entries without deleting existing ones unless necessary.

IMPORTANT NOTE: THERE IS A FOLDER IN THE ROOT DIR THAT IS CALLED "reference-project", THE CODE INSIDE THIS FOLDER SHOULD NOT BE MODIFIED BY ANY MEANS, BUT IT MUST BE CHECKED CAREFULLY TO SOLVE PROBLEMS AND IMPLEMENT CODE OR THIS PROJECT, AS IT IS A GOOD WORKING IMPLEMENTATION OF A NEXT JS PROJECT WORKING WITH LIVEKIT FOR VIDEO STREAMING, AND THAT MUST BE IMPLEMENTED IN NEXTALK.

## Objective
The goal is to maintain a high-performance, scalable, and secure application using the specified tech stack. These rules ensure NextTalk remains consistent, maintainable, and aligned with its vision as a top-tier real-time audio discussion platform, now enhanced with LiveKit for seamless call streaming.